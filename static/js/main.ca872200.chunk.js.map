{"version":3,"sources":["calendar.js","App.js","serviceWorker.js","index.js"],"names":["MyCalendar","onChange","ldate","_this","props","addDateToList","react_default","a","createElement","entry_default","this","Component","App","state","userInput","list","date","Date","userChangInput","event","newInput","target","value","setState","addToList","newItem","tmpDate","getDate","getMonth","getFullYear","listArray","slice","push","clearList","deleteItem","splice","doneItem","className","console","log","_this2","userList","map","val","onClick","calendar","type","placeholder","aria-label","aria-describedby","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RA4BeA,6MAtBXC,SAAW,SAAAC,GAKPC,EAAKC,MAAMC,cAAcH,4EAKzB,OACII,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIN,SAAUS,KAAKT,mBAhBVU,aC+FVC,6MA1FbC,MAAM,CACJC,UAAU,GACVC,KAAK,GACLC,KAAM,IAAIC,QAEZC,eAAiB,SAACC,GAChB,IAAMC,EAAWD,EAAME,OAAOC,MAE9BnB,EAAKoB,SAAS,CACZT,UAAWM,OAIfI,UAAY,SAACR,GACX,IAAIS,EAAUtB,EAAKU,MAAMC,UAEnBY,EAAU,IAAIT,KAAKd,EAAKU,MAAMG,MAEpCS,GAAW,SADUC,EAAQC,UAAY,IAAKD,EAAQE,WAAW,IAAKF,EAAQG,eAElE1B,EAAKU,MAAMG,KAAvB,IACMc,EAAY3B,EAAKU,MAAME,KAAKgB,MAAM,GACxCD,EAAUE,KAAMP,GAChBtB,EAAKoB,SAAS,CACZR,KAAKe,EACLd,KAAM,IAAIC,KACVH,UAAW,QAMfmB,UAAY,WACb,IAAMC,EAAa/B,EAAKU,MAAME,KACrBe,EAAY3B,EAAKU,MAAME,KAAKgB,MAAM,GACxCD,EAAUK,OAAOD,GACjB/B,EAAKoB,SAAS,CACZR,KAAKe,OAGTM,SAAU,SAACjB,GAEsB,KAA3BA,EAAME,OAAOgB,UACflB,EAAME,OAAOgB,UAAY,OAGzBlB,EAAME,OAAOgB,UAAY,MAG5BhC,cAAgB,SAACH,GACjBC,EAAKoB,SAAS,CAAEP,KAAMd,IACtBoC,QAAQC,IAAIrC,4EAMJ,IAAAsC,EAAA9B,KACD+B,EAAY/B,KAAKG,MAAME,KAAK2B,IAAI,SAACC,GACrC,OAAOrC,EAAAC,EAAAC,cAAA,OAAMoC,QAASJ,EAAKJ,UAApB,IAAkCO,KAK7C,OAEErC,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,kBACf/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,WACGiC,GAEPnC,EAAAC,EAAAC,cAACqC,EAAD,CAAYxC,cAAeK,KAAKL,gBAC9BC,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,oBACb/B,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAOxB,MAAOZ,KAAKG,MAAMC,UAAWb,SAAUS,KAAKQ,eAAgBmB,UAAU,eAAeU,YAAY,yBAAyBC,aAAW,uBAAuBC,mBAAiB,kBAC5L3C,EAAAC,EAAAC,cAAA,UAAQ6B,UAAU,4BAA4BS,KAAK,SAASF,QAASlC,KAAKc,WAA1E,OACFlB,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,wBAKnB/B,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,SAASF,QAASlC,KAAKuB,UAAWI,UAAU,kCAAzD,iBAlFY1B,aCKEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ca872200.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Calendar from 'react-calendar';\n\nclass MyCalendar extends Component {\n   \n\n    onChange = ldate => {\n        \n        \n        // this.setState({ ldate })\n\n        this.props.addDateToList(ldate)\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Calendar\n                    onChange={this.onChange}\n                    // value={this.state.ldate}\n                />\n            </div>\n        );\n    }\n}\n\n\nexport default MyCalendar","import React, { Component } from 'react';\nimport './App.css';\nimport MyCalendar from './calendar';\n\n\n\n\nclass App extends Component {\n  state={\n    userInput:'',\n    list:[],\n    date: new Date(), \n  }\n  userChangInput = (event)=>{ // binding by default \n    const newInput = event.target.value\n    \n    this.setState({\n      userInput: newInput\n    })\n\n  }\n  addToList = (date)=>{\n    let newItem = this.state.userInput;\n    // console.log(date);\n    const tmpDate = new Date(this.state.date);\n    const formatedDate = tmpDate.getDate() + \"/\" +tmpDate.getMonth()+\"/\"+ tmpDate.getFullYear();\n    newItem += \"  -  \" + formatedDate;\n    let ldate = this.state.date;\n    const listArray = this.state.list.slice(0);\n    listArray.push( newItem);\n    this.setState({\n      list:listArray,\n      date: new Date(),\n      userInput: '',\n\n    })\n    \n\n  }\n  clearList = () => {\n const deleteItem = this.state.list;\n    const listArray = this.state.list.slice(0);\n    listArray.splice(deleteItem);\n    this.setState({\n      list:listArray\n    })\n  }\n  doneItem =(event) =>{\n    \n    if (event.target.className === ''){\n      event.target.className = 'done'\n    }\n     else{\n      event.target.className = ''\n    }\n  }\n   addDateToList = (ldate) => { \n   this.setState({ date: ldate })\n   console.log(ldate)\n\n\n   \n    }\n\n  render() {\n    const userList =  this.state.list.map((val) => {\n      return < div onClick={this.doneItem} > { val }</ div >;\n\n    })\n\n   \n  return(\n    \n    <div className='container mt-5'>\n    <div>\n      <h1> Todos</h1>\n    </div>\n        <div>\n          {userList}\n        </div>\n    <MyCalendar addDateToList={this.addDateToList}/>\n      <div className=\"input-group mt-5\">\n        <input type=\"text\" value={this.state.userInput} onChange={this.userChangInput} className=\"form-control\" placeholder=\"what do you like to do\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\" />\n            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={this.addToList}>Add</button>\n          <div className=\"input-group-append\">\n          </div>\n          </div>\n\n        \n      <button type=\"button\" onClick={this.clearList} className=\"btn btn-outline-secondary mt-5\">clear</button>\n\n        </div>\n\n    ); \n      \n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}